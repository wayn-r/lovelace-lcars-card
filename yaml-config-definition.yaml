## YAML Configuration Options

# === Home Assistant Custom Card Configuration ===
# Note: This configuration follows Home Assistant Lovelace UI standards
# The 'type' property is handled by Lovelace, everything else is passed to the custom card's setConfig() method

type: custom:lovelace-lcars-card # Required: <string> Handled by Lovelace to load the custom card.

# === LCARS Card Configuration ===
# All properties below are passed to the custom card's setConfig() method
title: <string>                  # Optional: Card title for display in the UI.

# === Core Card Structure ===
groups: <array>                  # Required: Defines groups of elements. Elements MUST belong to a group.
  # --- Group Configuration (Each item in the 'groups' array) ---
  - group_id: <string>             # Required: Unique identifier for this group.
    elements: <array>              # Required: Array of element configurations within this group.
      # === Element Configuration (Each item in an 'elements' array) ===
      - id: <string>               # Required: Unique identifier for this element within the group (base ID).
                                   #   Full ID becomes "group_id.id" (e.g., "navigation.status_light").
        type: <string>             # Required: The type of LCARS element.
                                   #   Options: "rectangle", "text", "endcap", "elbow",
                                   #            "chisel-endcap", "top_header".

        appearance:                # Optional: Defines the static visual style of the element's shape.
          fill: <color_property>     # Primary fill color for the element's shape.
          stroke: <color_property>   # Outline/border color for the element's shape.
          strokeWidth: <number>      # Outline/border width in pixels for the element's shape.

          # --- Shape-Specific Appearance Properties ---
          cornerRadius: <number>     # For 'rectangle': Radius for rounded corners. Default: 0.
          direction: <string>        # For 'endcap', 'chisel-endcap': "left" or "right".
          orientation: <string>      # For 'elbow': "top-left", "top-right", "bottom-left", "bottom-right".
          bodyWidth: <number>        # For 'elbow': Thickness of the main part.
          armHeight: <number>        # For 'elbow': Thickness of the arm.
          # For 'top_header', `fill` applies to its internal endcaps and bar.

        text:                      # Optional: Defines text content and styling.
                                   #   Applicable to 'text' type directly, or for text *on* other
                                   #   buttonized elements (e.g., a rectangle button).
          content: <string>          # The text to display.
                                     #   For buttonized elements, this is the button's label.
          fill: <color_property>     # Color of the text.
          fontFamily: <string>       # e.g., "Antonio, Arial, sans-serif". Default: "Antonio".
          fontSize: <number>         # Font size in pixels. Default: 16.
          fontWeight: <string|number>  # e.g., "normal", "bold", 400, 700. Default: "normal".
          letterSpacing: <string|number>  # e.g., "1px", 0.5. Default: "normal".
          textAnchor: <string>       # SVG text-anchor: "start", "middle", "end". Default: "start".
          dominantBaseline: <string>  # SVG dominant-baseline. Default: "auto".
          textTransform: <string>    # CSS text-transform. Default: "none".
          cutout: <boolean>          # For buttonized elements: True for "cut-out" text. Default: false.
          elbow_text_position: <string>  # For 'elbow' (buttonized): "arm" or "body". Default: "arm".

          # --- Specific to 'top_header' type ---
          left_content: <string>     # Text for the left side of the top_header.
          right_content: <string>    # Text for the right side of the top_header.
          # `fontFamily`, `fontSize`, etc., in this `text` block will apply to both
          # left_content and right_content for a `top_header`.

        layout:                    # Optional: Defines positioning and sizing.
          width: <number | string_percentage>    # e.g., 100 or "50%"
          height: <number | string_percentage>   # e.g., 30 or "25%"
          offsetX: <number | string_percentage>  # e.g., 10 or "-5%"
          offsetY: <number | string_percentage>  # e.g., 10 or "-5%"

          anchor:                    # Optional: (Not for 'top_header')
            to: <string>               # Full ID of target element ("group.base_id") or "container".
            element_point: <string>    # Point on *this* element.
            target_point: <string>     # Point on the *target*.
                                       #   Anchor point options: "topLeft", "topCenter", "topRight", 
                                       #   "centerLeft", "center", "centerRight", "bottomLeft", 
                                       #   "bottomCenter", "bottomRight".

          stretch:                   # Optional: (Not for 'top_header')
            target1:
              id: <string>             # Full ID of target element ("group.base_id") or "container".
              edge: <string>           # Edge of target: "top", "bottom", "left", "right".
              padding: <number>        # Optional: Padding in pixels. Default: 0.
            target2:                 # Optional: For stretching between two targets or in two directions.
              id: <string>
              edge: <string>           # Edge of target: "top", "bottom", "left", "right".
              padding: <number>

        button:                    # Optional: Configuration if this element should act as a button.
          enabled: <boolean>         # True if it's a button. Default: false.
          actions:                   # Defines actions for different types of interactions.
            tap:                     # Action for a standard click/tap.
              action: <action_definition> # See action_definition below.
            hold:                    # Optional: Action for a click-and-hold.
              duration: <number>       # Optional (ms): Hold duration. Default: 500.
              action: <action_definition>  # See action_definition below.
            double_tap:              # Optional: Action for a double-tap.
              action: <action_definition>  # See action_definition below.

        state_management: <state_management_config>  # Optional: Local state management for this element.

        visibility_rules: <visibility_rules_config>  # Optional: Rules controlling element visibility.

        animations:                # Optional: Defines animations for this element.
          on_load: <animation_definition>    # Optional: Animation when element is first rendered.
          on_show: <animation_definition>    # Optional: Animation when element becomes visible.
          on_hide: <animation_definition>    # Optional: Animation when element is hidden.
          custom_states: <array>     # Optional: State-based animations.
            # --- Custom State Animation (Each item in the 'custom_states' array) ---
            - state: <string>          # Required: State name that triggers this animation.
              animation: <animation_definition>  # Required: Animation to play when state is active.

    state_management: <state_management_config>  # Optional: Local state management for this group.

    visibility_rules: <visibility_rules_config>  # Optional: Rules controlling group visibility.

    animations:                    # Optional: Group-level animations.
      on_load: <animation_definition>      # Optional: Animation when card loads.
      on_show: <animation_definition>      # Optional: Animation when group becomes visible.
      on_hide: <animation_definition>      # Optional: Animation when group is hidden.
      custom_states: <array>         # Optional: State-based animations.
        # --- Custom State Animation (Each item in the 'custom_states' array) ---
        - state: <string>              # Required: State name that triggers this animation.
          animation: <animation_definition>  # Required: Animation to play when state is active.


## Helper Type Definitions

# === State Management ===
state_management_config:
  default_state: <string>            # Optional: Default state name if no entity is bound or entity is unavailable.
  entity_id: <string>                # Optional: Home Assistant entity ID to bind state from.
  attribute: <string>                # Optional: Entity attribute to use as state value. Default: 'state'.


# === Visibility Rules ===
visibility_rules_config:
  operator: <string>                 # Required: Boolean operator - "and", "or", "not", "xor".
  conditions: <array>                # Required: Array of visibility conditions or nested rule groups.
    # --- Visibility Condition (Each item in the 'conditions' array) ---
    - type: <string>                 # Required: Condition type - "state", "entity_state", or "group".
      
      # --- For type: "state" (custom state) ---
      target_id: <string>            # Required: Full ID of target element/group ("group_id.element_id" or "group_id").
      state: <string>                # Required: Expected state value.
      
      # --- For type: "entity_state" (Home Assistant entity) ---
      entity_id: <string>            # Required: Home Assistant entity ID.
      attribute: <string>            # Optional: Entity attribute to check. Default: 'state'.
      value: <any>                   # Required: Expected value.
      
      # --- For type: "group" (nested condition group) ---
      operator: <string>             # Required: Boolean operator for this nested group - "and", "or", "not", "xor".
      conditions: <array>            # Required: Array of nested conditions (can contain more "group" types for deeper nesting).
      
      # --- Common properties ---
      negate: <boolean>              # Optional: If true, condition passes when state/value does NOT match. Default: false.


# === Color Property Configuration ===
color_property: <string>             # Option 1: Static color string (e.g., "#FF9900", "rgb(255,153,0)", "red").

color_property: <array>              # Option 2: Static color RGB array [red, green, blue].
  - <number_0_to_255>                # Red component.
  - <number_0_to_255>                # Green component.
  - <number_0_to_255>                # Blue component.
  # Example: [255, 153, 0] for orange

color_property:                      # Option 3: Dynamic color mapping based on states and entities.
  mapping:
    entity:                          # Optional: Map colors based on Home Assistant entity values.
      entity_id: <string>            # Required: Home Assistant entity ID.
      attribute: <string>            # Optional: Entity attribute to use. Default: 'state'.
      values:                        # Required: Object mapping entity values to colors.
        "<entity_value_1>": <color_property>  # e.g., "on": "#ffaa00"
        "<entity_value_2>": <color_property>  # e.g., "off": [51, 51, 51]
      interpolate: <boolean>         # Optional: Interpolate colors for numeric values within this entity. Default: false.
    
    group:                           # Optional: Map colors based on group state.
      group_id: <string>             # Required: Target group ID.
      values:                        # Required: Object mapping group states to colors.
        "<state_1>": <color_property>
        "<state_2>": <color_property>
      interpolate: <boolean>         # Optional: Interpolate colors for numeric values within this group. Default: false.
    
    element:                         # Optional: Map colors based on element state.
      element_id: <string>           # Required: Full element ID ("group_id.element_id").
      values:                        # Required: Object mapping element states to colors.
        "<state_1>": <color_property>
        "<state_2>": <color_property>
      interpolate: <boolean>         # Optional: Interpolate colors for numeric values within this element. Default: false.
    
    hover: <color_property>          # Optional: Color when element is hovered (for interactive elements).
    active: <color_property>         # Optional: Color when element is pressed/active (for interactive elements).
    
    default: <color_property>        # Optional: Fallback color when no mapping matches.
    interpolate: <boolean>           # Optional: Interpolate colors across all numeric state values globally. Default: false.
                                     #   Note: String values (e.g., "off") are still handled explicitly even with global interpolation.


# === Action Definition ===
action_definition:                   # Action configuration object.
  action: <string>                   # Required: Type of action.
                                     #   Options: "call-service", "navigate", "url", "toggle", "more-info", 
                                     #           "set-state", "none".

  # --- Service Call Specific (if action: "call-service") ---
  service: <string>                  # Required: Service to call (e.g., "light.turn_on").
  service_data: <object>             # Optional: Data for the service call.
  target: <object>                   # Optional: Target for service call (e.g., { "area_id": "kitchen" }).

  # --- Navigation Specific (if action: "navigate") ---
  navigation_path: <string>          # Required: Path to navigate to (e.g., "/lovelace/lights").

  # --- URL Specific (if action: "url") ---
  url_path: <string>                 # Required: URL to open (e.g., "https://www.home-assistant.io").

  # --- Entity Specific (if action: "toggle" or "more-info") ---
  entity: <string>                   # Required: Entity ID for the action (e.g., "switch.fan").

  # --- State Setting Specific (if action: "set-state") ---
  target_id: <string>                # Required: Full ID of target element/group ("group_id.element_id" or "group_id").
  state: <string>                    # Required: State value to set.

  # --- General Properties ---
  confirmation: <boolean | object>   # Optional: Prompts user before executing.
                                     #   - true (for default confirmation dialog)
                                     #   - { text: "Custom message?", exemptions: [{ user: "user_id_exempt" }] }


# === Animation Definition ===
animation_definition:                # Animation definition for elements and groups.
  target_elements: <array>           # Optional: Array of element IDs to animate (groups only). Default: all elements in group.
  type: <string>                     # Required: Animation type.
                                     #   Options: "fade", "slide", "scale", "rotate", "morph".
  
  # --- Fade Animation Parameters (if type: "fade") ---
  opacity: <number>                  # Optional: Target opacity (0-1). Default: 1 for show, 0 for hide.
  
  # --- Slide Animation Parameters (if type: "slide") ---
  direction: <string>                # Required: Slide direction - "left", "right", "up", "down".
  distance: <number>                 # Optional: Distance in pixels. Default: 100.
  
  # --- Scale Animation Parameters (if type: "scale") ---
  scale: <number>                    # Optional: Target scale factor. Default: 1.
  origin: <string>                   # Optional: Transform origin - "center", "top", "bottom", "left", "right". Default: "center".
  
  # --- Rotate Animation Parameters (if type: "rotate") ---
  rotation: <number>                 # Required: Rotation in degrees.
  origin: <string>                   # Optional: Transform origin - "center", "top", "bottom", "left", "right". Default: "center".
  
  # --- Morph Animation Parameters (if type: "morph") ---
  width: <number>                    # Optional: Target width in pixels.
  height: <number>                   # Optional: Target height in pixels.
  x: <number>                        # Optional: Target x position in pixels.
  y: <number>                        # Optional: Target y position in pixels.
  
  # --- Common Animation Properties ---
  duration: <number>                 # Optional: Duration in milliseconds. Default: 300.
  delay: <number>                    # Optional: Delay before animation starts in milliseconds. Default: 0.
  ease: <string>                     # Optional: GSAP easing function. Default: "power2.out".
                                     #   Common options: "linear", "power1.out", "power2.out", "power3.out", 
                                     #                   "back.out", "bounce.out", "elastic.out", "sine.out".
  repeat: <number>                   # Optional: Number of times to repeat (-1 for infinite). Default: 0.
  yoyo: <boolean>                    # Optional: Reverse animation on repeat. Default: false.


# === Complex Animation Definition (for sequencing) ===
animation_definition:                # Alternative: Complex animation with sequencing (groups only).
  steps: <array>                     # Required: Array of animation steps.
    # --- Animation Step Configuration (Each item in the 'steps' array) ---
    - index: <number>                # Required: Execution order. Same index = concurrent execution.
                                     #   Higher indices wait for all lower indices to complete.
      target_elements: <array>       # Optional: Array of element IDs to animate in this step.
      type: <string>                 # Required: Animation type for this step.
      opacity: <number>              # Optional: Target opacity (if type: "fade").
      direction: <string>            # Optional: Slide direction (if type: "slide").
      distance: <number>             # Optional: Distance (if type: "slide").
      scale: <number>                # Optional: Target scale (if type: "scale").
      rotation: <number>             # Optional: Rotation in degrees (if type: "rotate").
      origin: <string>               # Optional: Transform origin (if type: "scale" or "rotate").
      width: <number>                # Optional: Target width (if type: "morph").
      height: <number>               # Optional: Target height (if type: "morph").
      x: <number>                    # Optional: Target x position (if type: "morph").
      y: <number>                    # Optional: Target y position (if type: "morph").
      duration: <number>             # Optional: Duration for this step.
      delay: <number>                # Optional: Delay for this step.
      ease: <string>                 # Optional: Easing for this step.
      repeat: <number>               # Optional: Repeat count for this step.
      yoyo: <boolean>                # Optional: Yoyo setting for this step.