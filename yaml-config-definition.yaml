## YAML Configuration Options

# === Home Assistant Custom Card Configuration ===
# Note: This configuration follows Home Assistant Lovelace UI standards
# The 'type' property is handled by Lovelace, everything else is passed to the custom card's setConfig() method

card_type: custom:lovelace-lcars-card # Required: <string> Handled by Lovelace to load the custom card.

# === LCARS Card Configuration ===
# All properties below are passed to the custom card's setConfig() method
card_title: <string>                  # Optional: Card title for display in the UI.

# === Core Card Structure ===
groups: <array>                  # Required: Defines groups of elements. Elements MUST belong to a group.
  # --- Group Configuration (Each item in the 'groups' array) ---
  - group_id: <string>             # Required: Unique identifier for this group.
    elements: <array>              # Required: Array of element configurations within this group.
      # === Element Configuration (Each item in an 'elements' array) ===
      - id: <string>               # Required: Unique identifier for this element within the group (base ID).
                                   #   Full ID becomes "group_id.id" (e.g., "navigation.status_light").
        type: <string>             # Required: The type of LCARS element.
                                   #   Options: "rectangle", "text", "endcap", "elbow",
                                   #            "top_header", "logger-widget", "graph-widget", "vertical-slider", "weather-icon", "entity-metric-widget".
        entity: <string|array>     # Optional: Home Assistant entity ID or array of entity IDs.
                                   #   Required for 'graph-widget', 'entity-text-widget', and 'weather-icon'.
                                   #   For 'entity-text-widget', this can be a single entity ID string or an array of up to two entity ID strings.
                                   #   When two are provided, the second entity's state will be displayed in parentheses.
                                   #   For 'graph-widget', this can be:
                                   #     - A single entity ID string
                                   #     - An array of entity ID strings
                                   #     - An array mixing strings and objects for customization
        # === Graph Widget Specific ===
                                   #   Object format: {id: <string>, color: <color_property>, toggleable: <boolean>, animated: <boolean>, duration: <number>}
                                   #   Where:
          - id: <string>            # Required entity ID
            color: <color_property> # Optional line color override
            toggleable: <boolean>   # Optional, enables click to toggle visibility (default: true)
            animated: <boolean>     # Optional, enables line drawing animation (default: true)
            duration: <number>      # Optional, animation duration in milliseconds (default: 3000)
        grid:                      # Optional for 'graph-widget': Defines the grid line configuration.
          num_lines: <number>        # Optional: The number of horizontal grid lines to display. Default: 6.
          fill: <color_property>     # Optional: The color for the grid lines. Default: '#0b6288'.
          label_fill: <color_property> # Optional: The color for the grid line labels. Default: 'white'.

         # === Entity Metric Widget Specific ===
         #   A pill-style metric widget that shows: [Label Pill] [Value Text] [Unit Pill]
         #   - Uses the entity friendly name for the label when label.content is omitted
         #   - Uses the entity's state or the specified attribute for the value when value.content is omitted
         #   - Uses the entity's unit_of_measurement attribute for the unit when unit.content is omitted
         #   - Rounded corners are enabled by default; override via appearance.cornerRadius
         label:                         # Optional overrides for the label pill text and sizing
           content: <string>              # Text for the label pill. Defaults to entity friendly name
           width: <number>                # Width of the label pill in px. Default: 200
           height: <number>               # Font-cap height used to compute font size. Default: 80% of widget height
           fontFamily: <string>
           fontWeight: <string|number>
           fill: <color_property>         # Text color inside the pill (cutout). Default: inherits
           offsetX: <number>              # Horizontal spacing between leading edge and label pill
           textTransform: <string>        # Default: uppercase
         value:                         # Optional overrides for the middle numeric value text
           content: <string>              # Value text. Defaults to entity state or selected attribute
           fontFamily: <string>
           fontWeight: <string|number>
           fill: <color_property>         # Default: var(--lcars-color-white)
           offsetX: <number>              # Horizontal spacing between label pill and value text
           textTransform: <string>
         unit:                          # Optional overrides for the trailing unit pill
           content: <string>              # Defaults to entity attribute 'unit_of_measurement'
           width: <number>                # Pill width in px. Default: 60
           height: <number>               # Pill height. Default: widget height
           fontFamily: <string>
           fontWeight: <string|number>
           fill: <color_property>         # Pill fill color; defaults to appearance.fill
           offsetX: <number>              # Horizontal spacing between value text and unit pill
           textTransform: <string>
         appearance:
           fill: <color_property>         # Pill background color and default value text color. Default: var(--lcars-color-entity-metric)
           rounded: <string>              # Which outer side(s) are rounded: 'left' | 'right' | 'both'. Default: none. The inside edges are always square.

         # === Vertical Slider Widget Specific ===
        #   The vertical slider widget renders one or more stacked sliders similar to LCARS bars.
        #   It accepts a single entity ID or an array mixing strings and objects for customization.
        #   Object format: { id, color?, label?, min?, max?, attribute? }
        #   - id: Required HA entity id. Its numeric state is used.
        #   - color: Optional bar color override.
        #   - label: Optional label beneath the bar; defaults to entity friendly name.
        #   - min/max: Optional numeric range; defaults to 0..100.
        #   - attribute: Optional attribute name to read and control instead of the entity state (e.g., for climate thermostats: "temperature", "target_temp_high", "target_temp_low").
        appearance:
          fill: <color_property>     # Background of the slider track. Default: var(--lcars-color-graph-background).
        text:
          fill: <color_property>     # Color for labels and value readouts. Default: white.
        layout:
          width: <number|string_percentage>   # Overall widget width.
          height: <number|string_percentage>  # Overall widget height.
        grid:
          num_lines: <number>        # Number of horizontal segment bands inside each slider. Default: 8.
        # Additional sizing options on element root:
        spacing: <number>            # Horizontal spacing between sliders in pixels. Default: 14.
        top_padding: <number>        # Top padding above tracks. Default: 6.
        label_height: <number>       # Height reserved at bottom for value and label lines. Default: 28.
        use_floats: <boolean>        # If true, slider interaction uses floating-point values instead of integers. Default: false.
        appearance:                # Optional: Defines the static visual style of the element's shape.
          fill: <color_property>     # Primary fill color.
          stroke: <color_property>   # Outline/border color for the element's shape.
          strokeWidth: <number>      # Outline/border width in pixels for the element's shape.

          # --- Shape-Specific Appearance Properties ---
          cornerRadius: <number>     # For 'rectangle': Radius for rounded corners. Default: 0.
          chisel: <boolean>          # For 'endcap': Chiseled variant if true. Default: false.
          direction: <string>        # For 'endcap': "left" or "right".
          orientation: <string>      # For 'elbow': "top-left", "top-right", "bottom-left", "bottom-right".
          # For 'top_header', `fill` applies to its internal endcaps and bar.
          # For 'logger-widget', appearance properties are not applicable as it renders text elements.

        text:                      # Optional: Defines text content and styling.
                                   #   Applicable to 'text' type directly, or for text *on* other
                                   #   buttonized elements (e.g., a rectangle button).
                                   #   For 'graph-widget', `fill` colors the grid line labels.
          content: <string>          # The text to display.
                                     #   For buttonized elements, this is the button's label.
          fill: <color_property>     # Color of the text.
          fontFamily: <string>       # e.g., "Antonio, Arial, sans-serif". Default: "Antonio".
          fontSize: <number>         # Font size in pixels. Default: 16.
                                     #   Note: If layout.height is specified as a number, it will be used
                                     #   to calculate fontSize automatically and supersede this value.
          fontWeight: <string|number>  # e.g., "normal", "bold", 400, 700. Default: "normal".
          letterSpacing: <string|number>  # e.g., "1px", 0.5. Default: "normal".
                                     #   Note: If layout.width is specified as a number, it will be used
                                     #   to calculate letterSpacing automatically and supersede this value.
          textAnchor: <string>       # SVG text-anchor: "start", "middle", "end". Default: "start".
          dominantBaseline: <string>  # SVG dominant-baseline. Default: "auto".
          textTransform: <string>    # CSS text-transform. Default: "none".
          cutout: <boolean>          # For buttonized elements: True for "cut-out" text. Default: false.
          elbow_text_position: <string>  # For 'elbow' (buttonized): "arm" or "body". Default: "arm".
          offsetX: <number | string_percentage>  # Optional: Horizontal text offset. e.g., 10 or "5%". Default: 0.
          offsetY: <number | string_percentage>  # Optional: Vertical text offset. e.g., -5 or "10%". Default: 0.

          # --- Specific to 'top_header' type ---
          left_content: <string>     # Text for the left side of the top_header.
          right_content: <string>    # Text for the right side of the top_header.
          # `fontFamily`, `fontSize`, etc., in this `text` block will apply to both
          # left_content and right_content for a `top_header`.

          # --- Specific to 'logger-widget' type ---
          max_lines: <number>        # Maximum number of log lines to display. Default: 5.
          line_spacing: <number|string_percentage> # Optional: Vertical spacing between log lines.
                                                   #   Can be a number (pixels) or percentage of font size.
                                                   #   Default: 1.4 * fontSize.
          color_cycle: <array>       # Optional: Defines the color and duration for each log entry phase.
            - color: <color_property>  # The color for this phase.
              duration: <number>       # Duration in milliseconds before transitioning to the next color.
          # Note: The logger-widget automatically displays all entity state changes from Home Assistant.
          # Use standard text properties (fill, fontFamily, fontSize, etc.) to configure appearance.

        layout:                    # Optional: Defines positioning and sizing.
          width: <number | string_percentage>    # e.g., 100 or "50%"
                                                 #   Note: For text elements, numeric width values will
                                                 #   automatically calculate letterSpacing to fit the text
                                                 #   within the specified width, superseding text.letterSpacing.
          height: <number | string_percentage>   # e.g., 30 or "25%"
                                                 #   Note: For text elements, numeric height values will
                                                 #   automatically calculate fontSize to fit the text
                                                 #   within the specified height, superseding text.fontSize.
          offsetX: <number | string_percentage>  # e.g., 10 or "-5%"
          offsetY: <number | string_percentage>  # e.g., 10 or "-5%"

          # --- Shape-Specific Layout Properties ---
          bodyWidth: <number>        # For 'elbow': Thickness of the main body segment.
          armHeight: <number>        # For 'elbow': Thickness of the arm segment.

          anchor:                    # Optional: (Not for 'top_header')
            to: <string>               # Full ID of target element ("group.base_id") or "container".
            element_point: <string>    # Point on *this* element.
            target_point: <string>     # Point on the *target*.
                                       #   Anchor point options: "topLeft", "topCenter", "topRight", 
                                       #   "centerLeft", "center", "centerRight", "bottomLeft", 
                                       #   "bottomCenter", "bottomRight".

          stretch:                   # Optional: (Not for 'top_header')
            target1:
              id: <string>             # Full ID of target element ("group.base_id") or "container".
              edge: <string>           # Edge of target: "top", "bottom", "left", "right".
              padding: <number>        # Optional: Padding in pixels. Default: 0.
            target2:                 # Optional: For stretching between two targets or in two directions.
              id: <string>
              edge: <string>           # Edge of target: "top", "bottom", "left", "right".
              padding: <number>

        button:                    # Optional: Configuration if this element should act as a button.
          enabled: <boolean>         # True if it's a button. Default: false.
          actions:                   # Defines actions for different types of interactions.
            tap: <action_definition | array_of_action_definitions>   # Standard click/tap. Provide either a single action object OR an array for multiple actions executed in sequence.
            hold:                    # Optional: Actions for a click-and-hold gesture.
              duration: <number>          # Optional (ms): Hold duration. Default: 500.
              action: <action_definition> # Single action to execute after hold.
              actions: <array>            # Array of actions to execute after hold. Provide either "action" or "actions", not both.
            double_tap: <action_definition | array_of_action_definitions>  # Optional: Action(s) for a double-tap gesture.

        state_management: <state_management_config>  # Optional: Local state management for this element.

        visibility_rules: <visibility_rules_config>  # Optional: Rules controlling element visibility.

        animations:                # Optional: Defines animations for this element.
          on_load: <animation_definition>    # Optional: Animation when element is first rendered.
                                             #   Can be a single animation OR an animation_sequence with steps.
          on_show: <animation_definition>    # Optional: Animation when element becomes visible.
          on_hide: <animation_definition>    # Optional: Animation when element is hidden.
          custom_states: <array>     # Optional: State-based animations.
            # --- Custom State Animation (Each item in the 'custom_states' array) ---
            - state: <string>          # Required: State name that triggers this animation.
              animation: <animation_definition>  # Required: Animation to play when state is active.




## Helper Type Definitions

# === State Management ===
state_management_config:
  default_state: <string>            # Optional: Default state name if no entity is bound or entity is unavailable.
  entity_id: <string>                # Optional: Home Assistant entity ID to bind state from.
  attribute: <string>                # Optional: Entity attribute to use as state value. Default: 'state'.


# === Visibility Rules ===
visibility_rules_config:
  operator: <string>                 # Required: Boolean operator - "and", "or", "not", "xor".
  conditions: <array>                # Required: Array of visibility conditions or nested rule groups.
    # --- Visibility Condition (Each item in the 'conditions' array) ---
    - type: <string>                 # Required: Condition type - "state", "entity_state", or "group".
      
      # --- For type: "state" (custom state) ---
      target_id: <string>            # Required: Full ID of target element/group ("group_id.element_id" or "group_id").
      state: <string>                # Required: Expected state value.
      
      # --- For type: "entity_state" (Home Assistant entity) ---
      entity_id: <string>            # Required: Home Assistant entity ID.
      attribute: <string>            # Optional: Entity attribute to check. Default: 'state'.
      value: <any>                   # Required: Expected value.
      
      # --- For type: "group" (nested condition group) ---
      operator: <string>             # Required: Boolean operator for this nested group - "and", "or", "not", "xor".
      conditions: <array>            # Required: Array of nested conditions (can contain more "group" types for deeper nesting).
      
      # --- Common properties ---
      negate: <boolean>              # Optional: If true, condition passes when state/value does NOT match. Default: false.


# === Color Property Configuration ===
color_property: <string>             # Option 1: Static color string (e.g., "#FF9900", "rgb(255,153,0)", "red").

color_property: <array>              # Option 2: Static color RGB array [red, green, blue].
  - <number_0_to_255>                # Red component.
  - <number_0_to_255>                # Green component.
  - <number_0_to_255>                # Blue component.
  # Example: [255, 153, 0] for orange

color_property:                      # Option 3: Dynamic color mapping based on Home Assistant entity values.
  entity: <string>                   # Required: Home Assistant entity ID.
  attribute: <string>                # Optional: Entity attribute to use. Default: 'state'.
  mapping: <object>                  # Required: Object mapping entity values to colors.
    "<entity_value_1>": <color_property>  # e.g., "on": "#ffaa00"
    "<entity_value_2>": <color_property>  # e.g., "off": [51, 51, 51]
  default: <color_property>          # Optional: Fallback color when no mapping matches.
  interpolate: <boolean>             # Optional: Interpolate colors for numeric values. Default: false.

color_property:                      # Option 4: Stateful color configuration for interactive elements.
  default: <color_property>          # Optional: Default color (static string, array, or dynamic config).
  hover: <color_property>            # Optional: Color when element is hovered.
  active: <color_property>           # Optional: Color when element is pressed/active.


# === Action Definition ===
action_definition:                   # Action configuration object.
  action: <string>                   # Required: Type of action.
                                     #   Options: "call-service", "navigate", "url", "toggle", "more-info", 
                                     #           "set_state", "toggle_state", "none".

  # --- Service Call Specific (if action: "call-service") ---
  service: <string>                  # Required: Service to call (e.g., "light.turn_on").
  service_data: <object>             # Optional: Data for the service call.
  target: <object>                   # Optional: Target for service call (e.g., { "area_id": "kitchen" }).

  # --- Navigation Specific (if action: "navigate") ---
  navigation_path: <string>          # Required: Path to navigate to (e.g., "/lovelace/lights").

  # --- URL Specific (if action: "url") ---
  url_path: <string>                 # Required: URL to open (e.g., "https://www.home-assistant.io").

  # --- Entity Specific (if action: "toggle" or "more-info") ---
  entity: <string>                   # Required: Entity ID for the action (e.g., "switch.fan").

  # --- State Setting Specific (if action: "set_state") ---
  target_id: <string>                # Required: Full ID of target element/group ("group_id.element_id" or "group_id").
  state: <string>                    # Required: State value to set.

  # --- General Properties ---
  confirmation: <boolean | object>   # Optional: Prompts user before executing.
                                     #   - true (for default confirmation dialog)
                                     #   - { text: "Custom message?", exemptions: [{ user: "user_id_exempt" }] }


# === Animation Definition ===
animation_definition:                # Animation definition for elements and groups.
  - type: <string>                   # Required: Animation type.
                                     #   Options: "fade", "slide", "scale", "color".
  
    # --- Type-specific parameters ---
    fade_params:                       # Optional: Parameters for fade animations (if type: "fade").
      opacity_start: <number>          # Optional: Starting opacity (0-1).
      opacity_end: <number>            # Optional: Ending opacity (0-1).
    
    slide_params:                      # Optional: Parameters for slide animations (if type: "slide").
      direction: <string>              # Required: Slide direction - "up", "down", "left", "right".
      distance: <string>               # Required: Distance as string (e.g., "100px").
      opacity_start: <number>          # Optional: Starting opacity (0-1).
      opacity_end: <number>            # Optional: Ending opacity (0-1).
      movement: <string>               # Optional: Movement type - "in" (toward anchor) or "out" (away from anchor).
                                      #   When specified, changes how direction is interpreted relative to the element's anchor position.
    
    scale_params:                      # Optional: Parameters for scale animations (if type: "scale").
      scale_start: <number>            # Optional: Starting scale factor.
      scale_end: <number>              # Optional: Ending scale factor.
      transform_origin: <string>       # Optional: Transform origin point.
    
    color_params:                      # Optional: Parameters for color animations (if type: "color").
      property: <string>               # Optional: CSS property to animate - "fill", "stroke", or "color". Default: "fill".
      color_start: <string>            # Optional: Starting color (hex, rgb, or named color).
      color_end: <string>              # Required: Ending color (hex, rgb, or named color).
        
    # --- Common Animation Properties ---
    duration: <number>                 # Required: Duration in milliseconds.
    delay: <number>                    # Optional: Delay before animation starts in milliseconds. Default: 0.
    ease: <string>                     # Optional: GSAP easing function. Default: "power2.out".
    repeat: <number>                   # Optional: Number of times to repeat (-1 for infinite). Default: 0.
    yoyo: <boolean>                    # Optional: Reverse animation on repeat. Default: false.
    
    # --- Targeting ---
    target_self: <boolean>             # Optional: Target this element itself. Default: false.
    target_elements_ref: <array>       # Optional: Array of element IDs to target.
      - <string>                       # Element ID reference.
    target_groups_ref: <array>         # Optional: Array of group IDs to target.
      - <string>                       # Group ID reference.


# === Animation Sequence Definition (for complex multi-step animations) ===
animation_sequence:                  # Alternative: Animation sequence with multiple steps.
  target_self: <boolean>             # Optional: Target this element itself. Default: false.
  target_elements_ref: <array>       # Optional: Array of element IDs to target.
    - <string>                       # Element ID reference.
  target_groups_ref: <array>         # Optional: Array of group IDs to target.
    - <string>                       # Group ID reference.
  
  steps: <array>                     # Required: Array of animation step groups.
    # --- Animation Step Group Configuration (Each item in the 'steps' array) ---
    - index: <number>                # Required: Execution order. Groups with same index execute concurrently.
      animations: <animation_definition>            # Required: Array of animations to execute simultaneously in this group.

